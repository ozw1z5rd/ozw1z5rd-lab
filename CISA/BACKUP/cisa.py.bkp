#
# Quick and dirty cisa recovery
# fascia inferiore sempre verde
#
import cgi
import datetime
import webapp2 
import logging
from google.appengine.ext import db
from google.appengine.api import images
from google.appengine.api import users
# from wtforms import Form, TextField, validators, HiddenField, FileField, TextAreaField
from wtforms.ext.appengine.db import model_form
from jinja2 import Template
from model import * 
   
#
# BASIC PAGE
#
class StandardPage( webapp2.RequestHandler ):
    
    a = ""
    c = ""
    p = ""
    
    def error404( self ):
        return "404 the uri was not found or it is not mapped"
        
    def top( self ):
        return """
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">

        <head>
            <script type="text/javascript" src="/Static/tinymce/jscripts/tiny_mce/tiny_mce.js" ></script >
            <script type="text/javascript" >
            tinyMCE.init({
                    mode : "textareas",
                    theme : "advanced",   //(n.b. no trailing comma, this will be critical as you experiment later)
       // Theme options
                    theme_advanced_buttons1 : "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,|,styleselect,formatselect,fontselect,fontsizeselect",
                    theme_advanced_buttons2 : "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
                    theme_advanced_toolbar_location : "top",
                    theme_advanced_toolbar_align : "left",
                    theme_advanced_statusbar_location : "bottom",
                    theme_advanced_resizing : true,

            });
            </script >

        <script type="text/javascript">

          var _gaq = _gaq || [];
          _gaq.push(['_setAccount', 'UA-31577268-1']);
          _gaq.push(['_trackPageview']);

          (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
          })();

        </script>

            <STYLE type="text/css">
               body { font-family: verdana, arial  }
               a { font-family: verdana, arial; text-decoration:none; font-size: 10pt; }
               a:link       {color:#1c6434;}      /* unvisited link */
               a:visited    {color:#1c6434;}  /* visited link */
               a:hover      {color:#1c6434;}  /* mouse over link */
               a:active     {color:#1c6434;}  /* selected link */ 
            </STYLE>  
        </head>
        <body>
        """
        
    def bottom( self ):
        return """
        </body>
        </html>
        """
        
    def render( self, string ):
        self.response.out.write( self. top() )
        self.response.out.write( string )
        self.response.out.write( self.bottom() )
        
        
        
#
# DINAMIC PAGES
#
class MainPage( StandardPage ):

    def get(self):
        if self.request.get('categoria') is None or self.request.get('categoria') == "":
            categoria = Categoria.all().order("pos").fetch(1)[0]
            categoria_id = categoria.key().id()
        else:
            categoria_id = int( self.request.get('categoria') )
        prodotto_id  = int(self.request.get('prodotto') or "0" ) 

        htag = self.request.get("htag")

        self.render("""
                    <!-- intestazione --> 
                    <div>
                        <img src="/AppImg/imgHeader.png" id="h" usemap="#hmap" >
                        <map id="hmap" name="hmap">
                            <area shape="rect" coords="330,110,407,133"   href="/?htag=1" alt="" title="" />
                            <area shape="rect" coords="422,110,507,133"   href="/?htag=2" alt="" title="" />
                            <area shape="rect" coords="515,110,600,133"   href="/?htag=3" alt="" title="" />
                            <area shape="rect" coords="1126,136,1128,138" href="/" alt="" title="" />
                        </map>
                    </div>
                    <!-- corpo della pagina --> 
                    <!-- lista delle categorie ed immagine associata -->
                    <div style = 'position: absolute; top: 150px; left: 0 px; width: 490px;' >%s</div>
                    <!-- riquadro prodotto / lista della categoria -->
                    <div style = 'position: absolute; top: 150px; left: 294px; height: 750px;' >%s</div>
                    <!-- footer della pagina e immagine della categoria 2 -->
                    <div style = 'position: absolute; top: 788px; left: 0 px; width: 1280px;'>%s</div>          
        """ % ( self.doListCategory(categoria_id, htag), self.doPage( categoria_id, prodotto_id, htag), self.doFooterCategory( categoria_id, htag ) ))

    def doListCategory(self, catid, htag ):

        currentCat = Categoria().getCategoriaById( catid )
        coloreBG = currentCat.coloreBG
        coloreFG = currentCat.coloreFG
        id       = currentCat.key().id()
        titolo   = currentCat.titolo

        if len( htag ):
            currentHTML = DynamicHTML().getHTMLbyTag( htag )
            coloreBG = currentHTML.coloreBG
            coloreFG = currentCat.coloreFG
            id       = currentHTML.key().id()
            titolo   = currentHTML.titolo

        html = "<div style='height: 450px; width: 278px; background-image: url(\"/AppImg/imgBackCat.png\"); ' >"

        html += "<div style='position: absolute; top: 43px; left: 0px;' >"
        for cat in Categoria().all().order('pos'):
            html += "<img src='AppImg/categoryMask.png' style='background-color: #%s;' align='center'>" % ( cat.coloreBG ) 
            html += "<a href='?categoria=%s'> %s</a><br>" % ( cat.key().id() , cat.titolo ) 
        html += "</div>"

        html += "</div>"
        if len( htag ):
            html += "<img style='position: relative; left: 15px;' src='/DataStoreImage/HTML/Small/%s'>" % ( htag )
        else:        
            html += "<img style='position: relative; left: 15px;' src='/DataStoreImage/Categoria/Small/%s'>" % ( catid ) ###
        return html



    def doFooterCategory(self, category_id, htag ):
        if len( htag ):
            ohtml = DynamicHTML().getHTMLbyTag( htag )    
            html = "<img style='position: relative; left: 12px;' src='/DataStoreImage/HTML/Big/%s' width='1100' height='120' >" % ( htag   )
        else:            
            category = Categoria().getCategoriaById( category_id )
            html = "<img style='position: relative; left: 12px;' src='/DataStoreImage/Categoria/Big/%s' width='1100' height='120' >" % ( category_id )

        return html + "<img src='/AppImg/footerMask.png' style='background-color: #7ab51d;' >" 


    def getTableForArticolo( self, articolo ):
        counter = 0 
        html = "<table>"
        html += "<tr><th>codice</th><th>bar codecodice</th><th>confezione</th><th>CRT</th><th>Pallet</th></tr>"
       
        for i in xrange(1,10): # 1 . . . 9 
            row = getattr( articolo, "variante" + str( i ) )
            try:
                ( a, b, c, d, e ) = row.split(",")
            except:
                continue

            html += "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>" % ( a,b,c,d,e )
            counter = counter + 1

        html += "</table> "

        if counter >= 1 :
            return html 
        return ""

    def composeProductPage( self, prodid, catid  ):
        articolo = Articolo().getArticoloById( prodid )
        cat      = Categoria().getCategoriaById( catid )
        html  = self.getHeader( cat.coloreBG, cat.coloreFG, cat.titolo )
        html += "<img style='position: absolute; top: 42px; left: 11px; z-index: 3;' src='/AppImg/photoMask.png'>"
        html += "<img style='position: absolute; top: 42px; left: 0px; z-index: 1;' src='/AppImg/prodMask.png' >"
        html += "<img style='position: absolute; top: 42px; left: 50px; z-index: 2;' src='/DataStoreImage/Articolo/Big/%s'>" % ( prodid )

        html += "<div style='position: absolute; top: 42px; left: 408px; z-index: 4; background-color: #f3eccf; width: 383px; height: 552px; overflow: auto;' >"
        html += articolo.descrizione
        html += self.getTableForArticolo( articolo );
        html += "</div>"

# Titolo
        html += "<div style='position: absolute; color: #%s; left: 100px; top: 550px; z-index: 5;'>%s</div>" \
        % ( cat.coloreFG, articolo.titolo )

        html += "<div style='position: absolute; top: 620x; left: 0px; background-color: #%s; width: 828px; height: 5px;' ></div>" % ( cat.coloreBG )
        return html



    def getHeader( self, coloreBG, coloreFG, testo="nessun testo definito" ):
        coloreFG = "fff"
        html  = "<img src='/AppImg/catTitleMask.png' style='background-color: #%s;' >" % ( coloreBG )
        html += "<a href='javascript:history.go(-1)' border='0'><img src='/AppImg/bntBack.png'  style=' position: relative; top: -4px; left: -842px; ' ></a>" 
        html += "<div style='border-style: none; color: #%s; position: relative; top: -28px; left : 200px; text-align: right; width: 600px;' >%s</div>" % ( coloreFG, testo  )
        return html

    def composeCatalogPage( self, catid ):
        cat = Categoria().getCategoriaById( catid )
        html = self.getHeader( cat.coloreBG, cat.coloreFG, cat.titolo )
        html += "<div style='position: relative; top: -23px; left: 0px; background-color: #e7d6ae; width: 828px; height: 600px; overflow-y: none; overflow-x: auto;' >"

        articoli = Articolo.getListArticoloByCatId( catid )
        html += "<table border='0' cellspacing='0' cellpadding='0' >"
        while len( articoli ) > 0:
            html += "<tr style='height: 176px; overflow: auto;'>"
            for i in xrange(0,3):
                if len( articoli ) > 0:
                    articolo = articoli.pop(0)
                    artId= articolo.key().id()
                    html += """
                      <td id id='%s' name='%s' >
                        <div style='position: relative; height: 176px;' >
                            <a  border='0' href='/?categoria=%s&prodotto=%s'>
                                <img  style='position: relative; top: 0px; left: 0px; z-index: 2;' src='/AppImg/thumbMask.png'>
                            </a>
                            <img  style='position: relative; top: -178px; left: 43px; z-index: 1;' src='/DataStoreImage/Articolo/Small/%s'>
                            <div style='position: relative; top: -160px; left: 80px; z-index: 3;'>
                                %s
                            </div>
                        </div>
                     </td>
                    """ % (artId, artId, catid, artId,  artId, articolo.titolo ) 
                else:
                    html += """
                     <td>
                        <div> 
                        </div>
                     </td>
                    """ 
                    
            html += "</tr>"
        html += "</table>"
        html += "</div>"
        html += "<div style='position: absolute; top: 628px; background-color: #%s; width: 828px; height: 5px;' ></div>" % ( cat.coloreBG )
        return html 

    def composeHtmlPage( self, t ):
        image = "not def"
        titolo = ""
        if t == "1" : # chi siamo 
            image = "whoMask.png"
            titolo = "Chi Siamo"
        elif t == "3": # dove siamo 
            image =  "contactMask.png"
            titolo = "Contatti"
        elif t == "2":
            image = "whereMask.jpg"
            titolo = "Dove Siamo"

        objHTML = DynamicHTML().getHTMLbyTag( t )
        fgcolor = bgcolor = "444444"; text = ""
        if objHTML is not None:
            text    = objHTML.html
            bgcolor = objHTML.coloreBG
            fgcolor = objHTML.coloreFG
            titolo  = objHTML.titolo
           
        html = self.getHeader(bgcolor, fgcolor, titolo )
        html += "<img style='position: relative; top: -23px; left: 0px; z-index: 2;' src='/AppImg/%s'>" % ( image )

# questo e' lo sfondo che ospita il testo di chi siamo e non e' usato nelle altre sezioni
        html += "<div style='border-style: none; position: relative; top: -560px; left: 72px; z-index: 1; background-color: #fff; width: 680px; height: 500px; overflow: hidden;' >"
        html += text
        html += "</div>"

        html += "<div style='position: absolute; top: 618px; z-index: 6; background-color: #%s; width: 828px; height: 5px;' ></div>" % ( "40b93c" )

        return html


    def doPage( self, catid, prodid, htag ):
        if len(htag) > 0:
            return self.composeHtmlPage( htag )
        elif prodid != 0:
            return self.composeProductPage( prodid, catid )
        elif catid != 0:
            return self.composeCatalogPage( catid )
        else:
            return """No catid or productid."""


#
# STATIC PAGES
#
class HTML( StandardPage ):
    def get(self):
        id = int(self.request.get("id"))
        html = DynamicHTML.get_by_id( id )
        return self.render( html )  


#
# ADMIN PAGES
#
class AdminCategory( StandardPage ):
    
    def linkToHome( self ):
        return "Categoria cancellata, clicca per <a href='/Admin'>continuare</a>"

    def delete(self, catid):
        cat = Categoria().getCategoriaById( catid )
        if cat is not None:
            cat.delete()
        return self.linkToHome()

    def edit(self, catid ):
        form = Categoria().getForm( catid )
        template = Categoria().getTemplate( )
        return template.render( form = form, id = catid )

    def insert( self ):
        form = Categoria().getForm( None )
        template = Categoria().getTemplate( )
        return template.render( form = form, id = '' )
            
    def listCategories( self ):
        html = "<ol>"
        for cat in Categoria().all():
            html += """<li>%s, <a href='/AdminProduct?c=%s'>lista articoli</a>, 
                <a href='/Admin?a=e&c=%s'>modifica</a> 
                <a href='/AdminProduct?a=i&c=%s'>aggiungi prod</a> 
                <a href='/Admin?a=d&c=%s'>cancella</a> """ \
                % ( cat.titolo, cat.key().id(), cat.key().id(), cat.key().id(),  cat.key().id() )
        html += "</ol>"
        html += "<a href='/Admin?a=i'>Aggiungi categoria</a>"
        return html

    def MainPage(self):
        return """
        <html>
          <body>
            <h1>Lista delle categorie presenti</h1>
            %s
          </body>
          <h2>Testi statici</h2>
          <ul>
            <li><a href="/AdminHTML?tag=1">Chi siamo </a>
            <li><a href="/AdminHTML?tag=2">Dove siamo</a>
            <li><a href="/AdminHTML?tag=3">Contatti</a>
           </ul>
        </html>
        """ % ( self.listCategories() )

    def get(self):
        a = self.request.get("a")
        c = int(self.request.get("c") or "0" )

        r = self.MainPage()

        if a == "e":
            r = self.edit( c )
        if a == "d":
            r = self.delete( c )
        if a == "i":
            r = self.insert( )  

        return self.render(r)

    def post( self ):
        id          = int(self.request.get('id') or "0" )
        pos         = int(self.request.get('pos') or "99" )         
        titolo      = str(self.request.get('titolo'))
        coloreFG    = str(self.request.get('coloreFG'))
        coloreBG    = str(self.request.get('coloreBG'))
        immagineA   = self.request.get('immagineA')
        immagineB   = self.request.get('immagineB')

        categoria = None

        if id is not 0:
            categoria = Categoria().getCategoriaById( id )
        if categoria is None:
            categoria = Categoria( )

        categoria.pos       = pos
        categoria.titolo    = titolo
        categoria.coloreFG  = coloreFG
        categoria.coloreBG  = coloreBG
        
        # in guestbook passa per un resize della classe image
        if len( immagineA ) > 0:
            categoria.immagineA = db.Blob(immagineA)
        if len( immagineB ) > 0:
            categoria.immagineB = db.Blob(immagineB)

        categoria.save()
        
        self.redirect("/Admin")
    #   return self.linkToHome()


class AdminProduct( StandardPage ):

# categoria corrente
    c = 0

    def linkToHome( self ):
        return "<p>Categoria cancellata, clicca per <a href='/AdminProduct?c=%s'>continuare</a>"    % ( self.c ) 
    
#
# lista tutti gli articoli di una certa categoria
#
    def listProductByCatId(self, catid):
        cat = Categoria().getCategoriaById( catid )
        articoli = Articolo().getListArticoloByCatId( catid )
        
        html = "<h1>Lista articoli per la categoria %s</h1> <ol>" % ( cat.titolo )
        if articoli is not None:
            for articolo in articoli:
                html += "<li><img src='/DataStoreImage/Articolo/Small/%s'>" % ( articolo.key().id()  ) 
                html += "%s,  <a href='/AdminProduct?a=e&p=%s&c=%s'>modifica</a> <a href='/AdminProduct?a=d&p=%s&c=%s'>cancella</a>" \
                % ( articolo.titolo, articolo.key().id(), catid, articolo.key().id(), catid)
            html += "</ol>"
        else:
            html += "<p>Nessun articolo in questa categoria"
        html += "<p><a href='/AdminProduct?a=i&c=%s'>Aggiungi prodotto in questa categoria</a>" % ( catid  ) 
        html += "<p><a href='/Admin'>Indietro alla lista delle categorie</a>"
        return html

    def insert(self, c):
        articolo = Articolo( catid = c )
# TODO spostare il passaggio dei default nel codice che ritorna il form
        form = model_form( Articolo, field_args={ 'catid' : { 'default' : c  } } )()
        template = Articolo().getTemplate( )
        return template.render( form = form, id = '' )

    def delete(self, prodid ):
        articolo = Articolo().getArticoloById( prodid )
        if articolo is not None:
            articolo.delete()
        return self.linkToHome()

    def edit(self, artid ):
        form = Articolo().getForm( artid )
        template = Articolo().getTemplate( )
        return template.render( form = form, id = artid )

    def get(self):

        p = int( self.request.get("p") or "1" )
        c = int( self.request.get("c") or "1" )
        a = str(self.request.get("a") or "")

        r = ""
        if a == "e":
            r = self.edit( p )
        elif a == "d":
            self.c = c # salva la cat per il link alla home
            r = self.delete( p )
        elif a == "i":
            r = self.insert( c )
        elif a == "m":
            r = None
        else: 
            r = self.listProductByCatId( c ) 

        self.render( r ) 

#
# TODO deve tornare alla pagina della lista con gli articoli per la categoria visualizzata prima
#
    def post(self):
#       c           = int(self.request.get('c'))
        id          = int(self.request.get('id') or "0" )
        catid       = int(self.request.get('catid') or "99" )           
        titolo      = str(self.request.get('titolo'))
        descrizione = str(self.request.get('descrizione'))
        immagine    = self.request.get('immagine')
        variante1   = self.request.get('variante1')
        variante2   = self.request.get('variante2')
        variante3   = self.request.get('variante3')
        variante4   = self.request.get('variante4')
        variante5   = self.request.get('variante5')
        variante6   = self.request.get('variante6')
        variante7   = self.request.get('variante7')
        variante8   = self.request.get('variante8')
        variante9   = self.request.get('variante9')

        articolo = None

        if id is not 0:
            articolo = Articolo().getArticoloById( id )
        if articolo is None:
            articolo = Articolo( )

        articolo.catid        = catid        
        articolo.titolo       = titolo   
        articolo.descrizione  = descrizione 
        if immagine is not None and len( immagine ) > 0 :
            articolo.immagine = db.Blob( immagine ) 
            articolo.thumb    = db.Blob( images.resize( immagine, 120, 120 ) )
        articolo.variante1    = variante1   
        articolo.variante2    = variante2   
        articolo.variante3    = variante3   
        articolo.variante4    = variante4   
        articolo.variante5    = variante5   
        articolo.variante6    = variante6   
        articolo.variante7    = variante7   
        articolo.variante8    = variante8   
        articolo.variante9    = variante9   

        articolo.save()
        
        self.redirect("/Admin")
    #   return self.linkToHome()

class DataStoreImage( StandardPage ):
    def get( self ):
        path = self.request.path
        binData = None
        ( svoid1, svoid, stype, ssize, sid ) = path.split("/")
        id = int ( sid )
        self.response.headers['Content-Type'] = 'image/jpeg'

        if stype == "Articolo" : 
            articolo = Articolo().get_by_id( id  )
            if ssize == "Big":
                binData = articolo.immagine 
            else:
                binData = articolo.thumb
        elif stype == "Categoria":
            categoria = Categoria().get_by_id( id )
            if ssize == "Big":
                binData = categoria.immagineB
            else:
                binData = categoria.immagineA
        elif stype == 'HTML' : 
            HTML = DynamicHTML().getHTMLbyTag( str(id ) )
            if ssize == 'Big' : 
                binData = HTML.immagineB
            else:
                binData = HTML.immagineA

        return self.response.out.write( binData )
    
class AdminHTML( StandardPage ):
        
    def get( self ):
        tag = self.request.get("tag")
        form = DynamicHTML().getForm( tag )
        template = DynamicHTML().getTemplate( )
        self.render( template.render( form = form, tag = tag ) )

    def post( self ):
        tag = self.request.get("tag")
        html = self.request.get("html")
        ht = DynamicHTML.getHTMLbyTag( tag )
        coloreFG    = str(self.request.get('coloreFG'))
        coloreBG    = str(self.request.get('coloreBG'))
        immagineA   = self.request.get('immagineA')
        immagineB   = self.request.get('immagineB')
    
        if ht is None :
            ht = DynamicHTML( )
        ht.html = html
        ht.tag = tag
        ht.coloreFG = coloreFG
        ht.coloreBG = coloreBG
        if len( immagineA ) > 0:
            ht.immagineA = db.Blob(immagineA)
        if len( immagineB ) > 0:
            ht.immagineB = db.Blob(immagineB)

        ht.put()
        self.redirect("/Admin")
    
#
# MAIN
#
if 0:
        for i in Categoria.all():
            i.delete()
        for i in Articolo.all():
            i.delete()

        c1 = Categoria( pos= 1,titolo="uno", coloreFB="000", coloreBG="22f", ).save().id()
        c2 = Categoria( pos= 2,titolo="due", coloreFB="000", coloreBG="3ff", ).save().id()
        c3 = Categoria( pos= 3,titolo="tre", coloreFB="000", coloreBG="f4f", ).save().id()
        c4 = Categoria( pos= 4,titolo="quattro", coloreFB="000", coloreBG="59f", ).save().id()
        Categoria( pos= 5,titolo="cinque", coloreFB="000", coloreBG="76f", ).save()
        Categoria( pos= 6,titolo="sei", coloreFB="000", coloreBG="71f", ).save()
        Categoria( pos= 7,titolo="sette", coloreFB="000", coloreBG="67f", ).save()

        Articolo(  titolo="articolo 1 1", descrizione="..", catid = c1 ).save()
        Articolo(  titolo="articolo 2 1", descrizione="..", catid = c1 ).save()
        Articolo(  titolo="articolo 3 1", descrizione="..", catid = c1 ).save()
        Articolo(  titolo="articolo 4 1", descrizione="..", catid = c1 ).save()
        Articolo(  titolo="articolo 1 2", descrizione="..", catid = c2 ).save()
        Articolo(  titolo="articolo 2 2", descrizione="..", catid = c2 ).save()
        Articolo(  titolo="articolo 1 3", descrizione="..", catid = c3 ).save()
        Articolo(  titolo="articolo 1 4", descrizione="..", catid = c4 ).save()
      
app = webapp2.WSGIApplication([
        ( '/', MainPage ),
        ( '/AdminHTML', AdminHTML),
        ( '/HTML', HTML),
        ( '/PostHTML', AdminHTML),
        ( '/Admin', AdminCategory ),
        ( '/PostCategoria', AdminCategory ),
        ( '/AdminProduct', AdminProduct ),
        ( '/DataStoreImage/.*', DataStoreImage ),
        ( '/PostArticolo', AdminProduct )
], debug=True )

